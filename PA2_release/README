# CS311 Programming Assignment 2: Adversarial Search

For this assignment, you will be implementing minimax and expectimax agents to play Pac-Man. Refer to the Canvas assignment for assignment specifications. This README describes how to run the skeleton code.

## Running PacMan

Run the Pac-Man game with `pacman.py`. By default it opens a graphical window so you can play/watch. Relevant commands for each part are described in the Canvas assignment. Use a `-h` option to see the available command-line options, but you won't need to use most of these.

```
$ python3 pacman.py -h
Usage: 
  USAGE:      python pacman.py <options>
  EXAMPLES:   (1) python pacman.py
                  - starts an interactive game
              (2) python pacman.py --layout smallClassic --zoom 2
              OR  python pacman.py -l smallClassic -z 2
                  - starts an interactive game on a smaller board, zoomed in
  

Options:
  -h, --help            show this help message and exit
  -n GAMES, --numGames=GAMES
                        the number of GAMES to play [Default: 1]
  -l LAYOUT_FILE, --layout=LAYOUT_FILE
                        the LAYOUT_FILE from which to load the map layout
                        [Default: mediumClassic]
  -p TYPE, --pacman=TYPE
                        the agent TYPE in the pacmanAgents module to use
                        [Default: KeyboardAgent]
  -t, --textGraphics    Display output as text only
  -q, --quietTextGraphics
                        Generate minimal output and no graphics
  -g TYPE, --ghosts=TYPE
                        the ghost agent TYPE in the ghostAgents module to use
                        [Default: RandomGhost]
  -k NUMGHOSTS, --numghosts=NUMGHOSTS
                        The maximum number of ghosts to use [Default: 4]
  -z ZOOM, --zoom=ZOOM  Zoom the size of the graphics window [Default: 1.0]
  -f, --fixRandomSeed   Fixes the random seed to always play the same game
  -r, --recordActions   Writes game histories to a file (named by the time
                        they were played)
  --replay=GAMETOREPLAY
                        A recorded game file (pickle) to replay
  -a AGENTARGS, --agentArgs=AGENTARGS
                        Comma separated values sent to agent. e.g.
                        "opt1=val1,opt2,opt3=val3"
  -x NUMTRAINING, --numTraining=NUMTRAINING
                        How many episodes are training (suppresses output)
                        [Default: 0]
  --frameTime=FRAMETIME
                        Time to delay between frames; <0 means keyboard
                        [Default: 0.1]
  -c, --catchExceptions
                        Turns on exception handling and timeouts during games
  --timeout=TIMEOUT     Maximum length of time an agent can spend computing in
                        a single game [Default: 30]
```

## Unit testing

To assist you during development, a unit test suite is provided in `adversarial_test.py`. These tests are a subset of the tests run by Gradescope, and are primarily intended to catch timeouts before submission. You can run the tests by executing the `adversarial_test.py` file as a program, e.g. `python3 adversarial_test.py`

```
$ python3 adversarial_test.py
....
----------------------------------------------------------------------
Ran 4 tests in 13.329s

OK
```

To play, type:   python pacman.py
For help, type:  python pacman.py -h
See http://inst.eecs.berkeley.edu/~cs188 for more information.

## Credits

This assignment was adapted from the Berkeley CS188 AI projects implemented by John DeNero (denero@cs.berkeley.edu), Dan Klein (klein@cs.berkeley.edu) and others.
